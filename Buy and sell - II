#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    int rec(int ind, int buy, int n, vector<int>& values, vector<vector<int>>& dp) {
        if (ind == n) return 0;
        if (dp[ind][buy] != -1) return dp[ind][buy];
        int profit = 0;
        if (buy) {
            profit = max(-values[ind] + rec(ind + 1, 0, n, values, dp),
                         0 + rec(ind + 1, 1, n, values, dp));
        } else {
            profit = max(values[ind] + rec(ind + 1, 1, n, values, dp),
                         0 + rec(ind + 1, 0, n, values, dp));
        }
        return dp[ind][buy] = profit;
    }

    int tab(vector<int>& values, int n) {
        vector<vector<int>> dp(n + 1, vector<int>(2, 0));
        for (int ind = n - 1; ind >= 0; --ind) {
            for (int buy = 0; buy <= 1; ++buy) {
                if (buy) {
                    dp[ind][buy] = max(-values[ind] + dp[ind + 1][0], 0 + dp[ind + 1][1]);
                } else {
                    dp[ind][buy] = max(values[ind] + dp[ind + 1][1], 0 + dp[ind + 1][0]);
                }
            }
        }
        return dp[0][1];
    }

    int so(vector<int>& values, int n) {
        vector<int> ahead(2, 0), curr(2, 0);
        for (int ind = n - 1; ind >= 0; --ind) {
            for (int buy = 0; buy <= 1; ++buy) {
                if (buy) {
                    curr[buy] = max(-values[ind] + ahead[0], 0 + ahead[1]);
                } else {
                    curr[buy] = max(values[ind] + ahead[1], 0 + ahead[0]);
                }
            }
            ahead = curr;
        }
        return ahead[1];
    }

    int soo(vector<int>& values, int n) {
        int aheadBuy = 0, aheadNotBuy = 0, currBuy = 0, currNotBuy = 0;
        for (int ind = n - 1; ind >= 0; --ind) {
            currNotBuy = max(values[ind] + aheadBuy, 0 + aheadNotBuy);
            currBuy = max(-values[ind] + aheadNotBuy, 0 + aheadBuy);
            aheadBuy = currBuy;
            aheadNotBuy = currNotBuy;
        }
        return aheadBuy;
    }

    int maxProfit(vector<int>& prices, int method) {
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2, -1));
        if (method == 1) return rec(0, 1, n, prices, dp);
        if (method == 2) return tab(prices, n);
        if (method == 3) return so(prices, n);
        return soo(prices, n);
    }
};

int main() {
    int n, method;
    cout << "Enter the number of days: ";
    cin >> n;
    vector<int> prices(n);
    cout << "Enter the stock prices: ";
    for (int i = 0; i < n; ++i) {
        cin >> prices[i];
    }
    cout << "Choose method (1: Recursion, 2: Tabulation, 3: Space Optimized, 4: Optimized Variables): ";
    cin >> method;
    Solution solution;
    int result = solution.maxProfit(prices, method);
    cout << "Maximum Profit: " << result << endl;
    return 0;
}
