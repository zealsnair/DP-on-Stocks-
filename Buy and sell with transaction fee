#include <bits/stdc++.h>
using namespace std;

// Recursive approach with memoization
int rec(int ind, int buy, int n, int fee, vector<int>& prices, vector<vector<int>>& dp) {
    if (ind >= n) return 0;

    if (dp[ind][buy] != -1) return dp[ind][buy];

    int profit = 0;
    if (buy) {
        profit = max(-prices[ind] - fee + rec(ind + 1, 0, n, fee, prices, dp), 
                     0 + rec(ind + 1, 1, n, fee, prices, dp));
    } else {
        profit = max(prices[ind] + rec(ind + 1, 1, n, fee, prices, dp), 
                     0 + rec(ind + 1, 0, n, fee, prices, dp));
    }

    return dp[ind][buy] = profit;
}

// Tabulation (Bottom-Up DP)
int tab(int n, int fee, vector<int>& prices) {
    vector<vector<int>> dp(n + 1, vector<int>(2, 0));

    for (int ind = n - 1; ind >= 0; --ind) {
        dp[ind][1] = max(-prices[ind] - fee + dp[ind + 1][0], dp[ind + 1][1]);
        dp[ind][0] = max(prices[ind] + dp[ind + 1][1], dp[ind + 1][0]);
    }

    return dp[0][1];
}

// Space Optimized DP
int soo(vector<int>& prices, int n, int fee) {
    int aheadBuy = 0, aheadNotBuy = 0, currBuy = 0, currNotBuy = 0;

    for (int ind = n - 1; ind >= 0; --ind) {
        currNotBuy = max(prices[ind] + aheadBuy, aheadNotBuy);
        currBuy = max(-prices[ind] - fee + aheadNotBuy, aheadBuy);

        aheadBuy = currBuy;
        aheadNotBuy = currNotBuy;
    }

    return aheadBuy;
}

int main() {
    int n, fee;
    cout << "Enter number of days: ";
    cin >> n;
    
    vector<int> prices(n);
    cout << "Enter stock prices: ";
    for (int i = 0; i < n; i++) {
        cin >> prices[i];
    }

    cout << "Enter transaction fee: ";
    cin >> fee;

    // Recursive Approach (With Memoization)
    vector<vector<int>> dp(n, vector<int>(2, -1));
    cout << "Maximum Profit (Recursive + Memoization): " << rec(0, 1, n, fee, prices, dp) << endl;

    // DP Tabulation
    cout << "Maximum Profit (Tabulation): " << tab(n, fee, prices) << endl;

    // DP Space Optimized
    cout << "Maximum Profit (Space Optimized): " << soo(prices, n, fee) << endl;

    return 0;
}
