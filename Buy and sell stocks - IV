#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    int so(vector<int>& prices, int n, int k) {
        vector<vector<int>> after(2, vector<int>(k + 1, 0)), curr(2, vector<int>(k + 1, 0));
        for (int ind = n - 1; ind >= 0; --ind) {
            for (int buy = 0; buy <= 1; ++buy) {
                for (int cap = 1; cap <= k; ++cap) {
                    if (buy) {
                        curr[buy][cap] = max(-prices[ind] + after[0][cap], 0 + after[1][cap]);
                    } else {
                        curr[buy][cap] = max(prices[ind] + after[1][cap - 1], 0 + after[0][cap]);
                    }
                }
            }
            after = curr;
        }
        return after[1][k];
    }

    int newRec(int ind, int trans, int n, int k, vector<int>& prices, vector<vector<int>>& dp) {
        if (ind == n || trans == 2 * k) return 0;
        if (dp[ind][trans] != -1) return dp[ind][trans];
        int profit = 0;
        if (trans % 2 == 0) {
            profit = max(-prices[ind] + newRec(ind + 1, trans + 1, n, k, prices, dp),
                         0 + newRec(ind + 1, trans, n, k, prices, dp));
        } else {
            profit = max(prices[ind] + newRec(ind + 1, trans + 1, n, k, prices, dp),
                         0 + newRec(ind + 1, trans, n, k, prices, dp));
        }
        return dp[ind][trans] = profit;
    }

    int tab(int n, int k, vector<int>& prices) {
        vector<vector<int>> dp(n + 1, vector<int>(2 * k + 1, 0));
        for (int ind = n - 1; ind >= 0; --ind) {
            for (int trans = 2 * k - 1; trans >= 0; --trans) {
                int profit = 0;
                if (trans % 2 == 0) {
                    profit = max(-prices[ind] + dp[ind + 1][trans + 1], 0 + dp[ind + 1][trans]);
                } else {
                    profit = max(prices[ind] + dp[ind + 1][trans + 1], 0 + dp[ind + 1][trans]);
                }
                dp[ind][trans] = profit;
            }
        }
        return dp[0][0];
    }

    int soo(int n, int k, vector<int>& prices) {
        vector<int> after(2 * k + 1, 0), curr(2 * k + 1, 0);
        for (int ind = n - 1; ind >= 0; --ind) {
            for (int trans = 2 * k - 1; trans >= 0; --trans) {
                int profit = 0;
                if (trans % 2 == 0) {
                    profit = max(-prices[ind] + after[trans + 1], 0 + after[trans]);
                } else {
                    profit = max(prices[ind] + after[trans + 1], 0 + after[trans]);
                }
                curr[trans] = profit;
            }
            after = curr;
        }
        return after[0];
    }

    int maximumProfit(vector<int>& prices, int n, int k, int method) {
        vector<vector<int>> dp(n, vector<int>(2 * k, -1));
        if (method == 1) return newRec(0, 0, n, k, prices, dp);
        if (method == 2) return tab(n, k, prices);
        if (method == 3) return soo(n, k, prices);
        return -1;
    }
};

int main() {
    int n, k, method;
    cout << "Enter the number of days: ";
    cin >> n;
    vector<int> prices(n);
    cout << "Enter the stock prices: ";
    for (int i = 0; i < n; ++i) {
        cin >> prices[i];
    }
    cout << "Enter the maximum number of transactions: ";
    cin >> k;
    cout << "Choose method (1: Recursion, 2: Tabulation, 3: Space Optimized): ";
    cin >> method;
    Solution solution;
    int result = solution.maximumProfit(prices, n, k, method);
    cout << "Maximum Profit: " << result << endl;
    return 0;
}
