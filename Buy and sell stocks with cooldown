#include <bits/stdc++.h>
using namespace std;

int rec(int ind, int buy, int n, vector<int>& prices, vector<vector<int>>& dp){
    if(ind >= n){
        return 0;
    }

    if(dp[ind][buy] != -1){
        return dp[ind][buy];
    }

    int profit = 0;
    if(buy){
        profit = max(-prices[ind] + rec(ind+1, 0, n, prices, dp),
                        0 + rec(ind+1, 1, n, prices, dp));
    }
    else{
        profit = max(prices[ind] + rec(ind+2, 1, n, prices, dp),
                        0 + rec(ind+1, 0, n, prices, dp));
    }

    return dp[ind][buy] = profit;
}

int tab(vector<int>& prices, int n){
    vector<vector<int>> dp(n+2, vector<int>(2, 0));

    for(int ind = n-1; ind >= 0; --ind){
        for(int buy = 0; buy <= 1; ++buy){
            if(buy){
                dp[ind][buy] = max(-prices[ind] + dp[ind+1][0], 
                                    0 + dp[ind+1][1]);
            }
            else{
                dp[ind][buy] = max(prices[ind] + dp[ind+2][1], 
                                    0 + dp[ind+1][0]);
            }
        }
    }

    return dp[0][1];
}

int so(vector<int>& prices, int n){
    vector<int> front1(2, 0), front2(2, 0), curr(2, 0);

    for(int ind = n-1; ind >= 0; --ind){
        for(int buy = 0; buy <= 1; ++buy){
            if(buy){
                curr[buy] = max(-prices[ind] + front1[0], 
                                    0 + front1[1]);
            }
            else{
                curr[buy] = max(prices[ind] + front2[1], 
                                    0 + front1[0]);
            }
        }
        front2 = front1;
        front1 = curr;
    }

    return curr[1];
}

int main() {
    int n;
    cout << "Enter the number of days: ";
    cin >> n;

    vector<int> prices(n);
    cout << "Enter the stock prices: ";
    for(int i = 0; i < n; i++) {
        cin >> prices[i];
    }

    cout << "Maximum Profit using Recursion (Memoization): ";
    vector<vector<int>> dp(n, vector<int>(2, -1));
    cout << rec(0, 1, n, prices, dp) << endl;

    cout << "Maximum Profit using Tabulation: " << tab(prices, n) << endl;
    cout << "Maximum Profit using Space Optimization: " << so(prices, n) << endl;
    
    return 0;
}
