#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    int rec(int ind, int buy, int cap, int n, vector<int>& prices, vector<vector<vector<int>>>& dp) {
        if (ind == n || cap == 0) return 0;
        if (dp[ind][buy][cap] != -1) return dp[ind][buy][cap];
        int profit = 0;
        if (buy) {
            profit = max(-prices[ind] + rec(ind + 1, 0, cap, n, prices, dp),
                         0 + rec(ind + 1, 1, cap, n, prices, dp));
        } else {
            profit = max(prices[ind] + rec(ind + 1, 1, cap - 1, n, prices, dp),
                         0 + rec(ind + 1, 0, cap, n, prices, dp));
        }
        return dp[ind][buy][cap] = profit;
    }

    int tab(vector<int>& prices, int n) {
        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(2, vector<int>(3, 0)));
        for (int ind = n - 1; ind >= 0; --ind) {
            for (int buy = 0; buy <= 1; ++buy) {
                for (int cap = 1; cap <= 2; ++cap) {
                    if (buy) {
                        dp[ind][buy][cap] = max(-prices[ind] + dp[ind + 1][0][cap],
                                                 0 + dp[ind + 1][1][cap]);
                    } else {
                        dp[ind][buy][cap] = max(prices[ind] + dp[ind + 1][1][cap - 1],
                                                 0 + dp[ind + 1][0][cap]);
                    }
                }
            }
        }
        return dp[0][1][2];
    }

    int so(vector<int>& prices, int n) {
        vector<vector<int>> after(2, vector<int>(3, 0)), curr(2, vector<int>(3, 0));
        for (int ind = n - 1; ind >= 0; --ind) {
            for (int buy = 0; buy <= 1; ++buy) {
                for (int cap = 1; cap <= 2; ++cap) {
                    if (buy) {
                        curr[buy][cap] = max(-prices[ind] + after[0][cap],
                                              0 + after[1][cap]);
                    } else {
                        curr[buy][cap] = max(prices[ind] + after[1][cap - 1],
                                              0 + after[0][cap]);
                    }
                }
            }
            after = curr;
        }
        return after[1][2];
    }

    int maxProfit(vector<int>& prices, int n, int method) {
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3, -1)));
        if (method == 1) return rec(0, 1, 2, n, prices, dp);
        if (method == 2) return tab(prices, n);
        if (method == 3) return so(prices, n);
        return -1;
    }
};

int main() {
    int n, method;
    cout << "Enter the number of days: ";
    cin >> n;
    vector<int> prices(n);
    cout << "Enter the stock prices: ";
    for (int i = 0; i < n; ++i) {
        cin >> prices[i];
    }
    cout << "Choose method (1: Recursion, 2: Tabulation, 3: Space Optimized): ";
    cin >> method;
    Solution solution;
    int result = solution.maxProfit(prices, n, method);
    cout << "Maximum Profit: " << result << endl;
    return 0;
}
